{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task 2-Prediction Using Unsupervised ML\n",
    "\n",
    "Author:PRATIGYA TYAGI Data Science and Business Analytics Intern at The Sparks Foundation \n",
    "To predict the optimum number of clusters using Unsupervised ML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the required libraries \n",
    "import pandas as pd \n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns \n",
    "%matplotlib inline \n",
    "from sklearn import datasets \n",
    "from sklearn.cluster import KMeans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv('C:\\\\Users\\\\pratigya\\\\Desktop\\\\Iris.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "      <th>Species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm      Species\n",
       "0   1            5.1           3.5            1.4           0.2  Iris-setosa\n",
       "1   2            4.9           3.0            1.4           0.2  Iris-setosa\n",
       "2   3            4.7           3.2            1.3           0.2  Iris-setosa\n",
       "3   4            4.6           3.1            1.5           0.2  Iris-setosa\n",
       "4   5            5.0           3.6            1.4           0.2  Iris-setosa"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head() #Display the first five rows of the dataset "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(\"Id\",axis=1,inplace=True)  #Dropping the Id column "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "      <th>Species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm      Species\n",
       "0            5.1           3.5            1.4           0.2  Iris-setosa\n",
       "1            4.9           3.0            1.4           0.2  Iris-setosa\n",
       "2            4.7           3.2            1.3           0.2  Iris-setosa\n",
       "3            4.6           3.1            1.5           0.2  Iris-setosa\n",
       "4            5.0           3.6            1.4           0.2  Iris-setosa"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 150 entries, 0 to 149\n",
      "Data columns (total 5 columns):\n",
      "SepalLengthCm    150 non-null float64\n",
      "SepalWidthCm     150 non-null float64\n",
      "PetalLengthCm    150 non-null float64\n",
      "PetalWidthCm     150 non-null float64\n",
      "Species          150 non-null object\n",
      "dtypes: float64(4), object(1)\n",
      "memory usage: 6.0+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info() # this provides a concise summary of the Dataframe "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(150, 5)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape #returns the dimensions of the dataframe "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>5.843333</td>\n",
       "      <td>3.054000</td>\n",
       "      <td>3.758667</td>\n",
       "      <td>1.198667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>0.828066</td>\n",
       "      <td>0.433594</td>\n",
       "      <td>1.764420</td>\n",
       "      <td>0.763161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>4.300000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>5.100000</td>\n",
       "      <td>2.800000</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>0.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>5.800000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.350000</td>\n",
       "      <td>1.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>6.400000</td>\n",
       "      <td>3.300000</td>\n",
       "      <td>5.100000</td>\n",
       "      <td>1.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>7.900000</td>\n",
       "      <td>4.400000</td>\n",
       "      <td>6.900000</td>\n",
       "      <td>2.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm\n",
       "count     150.000000    150.000000     150.000000    150.000000\n",
       "mean        5.843333      3.054000       3.758667      1.198667\n",
       "std         0.828066      0.433594       1.764420      0.763161\n",
       "min         4.300000      2.000000       1.000000      0.100000\n",
       "25%         5.100000      2.800000       1.600000      0.300000\n",
       "50%         5.800000      3.000000       4.350000      1.300000\n",
       "75%         6.400000      3.300000       5.100000      1.800000\n",
       "max         7.900000      4.400000       6.900000      2.500000"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()  # used ot view basic statistical details "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SepalLengthCm    0\n",
       "SepalWidthCm     0\n",
       "PetalLengthCm    0\n",
       "PetalWidthCm     0\n",
       "Species          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum() #to check for null values in the dataset "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Iris-setosa', 'Iris-versicolor', 'Iris-virginica'], dtype=object)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Species'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Before doing clustering using KMeans,we need to specify the optimum number of clusters . \n",
    "# For specifying the optimum number of clusters we are using the Elbow method .\n",
    "#The Elbow Method-in this the number of clusters will vary within a range .For each member WSS or within -cluster sum of\n",
    "#square is calculated .\n",
    "#These are then plotted against the range of clusters .The location of the elbow or the bend will determine the optimal\n",
    "#number of clusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculating the within cluster sum of squares \n",
    "x = df.iloc[:, [0, 1, 2, 3]].values\n",
    "WCSS=[]\n",
    "for i in range (1,11):\n",
    "    km=KMeans(n_clusters = i)\n",
    "    km.fit(x)\n",
    "    WCSS.append(km.inertia_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting the Elbow Curve -i.e the \"Within -Cluster sum of squares \"against the number of clusters\n",
    "plt.plot(range(1, 11), WCSS,color='green')\n",
    "plt.title('Elbow Curve ')\n",
    "plt.xlabel('Number of clusters')\n",
    "plt.ylabel('Within Cluster Sum of Squares') # Within cluster sum of squares\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "#To determine the optimal number of clusters, we have to select the value of k at the “elbow” ie the point after which the\n",
    "#rate of decrease in WCSS is minimal. Thus for the given data,we conclude that the optimal number of clusters for the data is 3.\n",
    "#So k=3 is the optimum number of clusters "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Applying k-means to dataset \n",
    "model=KMeans(n_clusters=3,init='k-means++',max_iter=300,n_init=10,random_state=0)\n",
    "model1=model.fit_predict(x)\n",
    "model1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualizing the clusters \n",
    "plt.scatter (x[model1==0,0],x[model1==0,1],s=100,c='red',label='Iris-setosa')\n",
    "plt.scatter (x[model1==1,0],x[model1==1,1],s=100,c='blue',label='Iris-versicolor')\n",
    "plt.scatter (x[model1==2,0],x[model1==2,1],s=100,c='red',label='Iris-virginica')\n",
    "\n",
    "#Plotting the cluster centers \n",
    "plt.scatter(model.cluster_centers_[:,0],model.cluster_centers_[:,1],s=100,c='yellow',label='centroids')\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "plt.show()    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
